import numpy as np
import soundfile as sf


def cosine_envelope(fs, delay, A, S, R, gate, duration):
    delay = int(fs * delay)
    A = int(fs * A)
    R = int(fs * R)
    gate = int(fs * gate)
    duration = int(fs * duration)
    e = np.zeros(duration)
    if A != 0:
        for n in range(delay, delay + A):
            e[n] = S * (0.5 - 0.5 * np.cos(np.pi * (n - delay) / A))

    for n in range(delay + A, gate):
        e[n] = S

    if R != 0:
        for n in range(gate, min(gate + R, duration)):
            e[n] = S * (0.5 + 0.5 * np.cos(np.pi * (n - gate) / R))

    return e


def ADSR(fs, A, D, S, R, gate, duration):
    A = int(fs * A)
    D = int(fs * D)
    R = int(fs * R)
    gate = int(fs * gate)
    duration = int(fs * duration)
    e = np.zeros(duration)
    if A != 0:
        for n in range(A):
            e[n] = (1 - np.exp(-5 * n / A)) / (1 - np.exp(-5))

    if D != 0:
        for n in range(A, gate):
            e[n] = 1 + (S - 1) * (1 - np.exp(-5 * (n - A) / D))

    else:
        for n in range(A, gate):
            e[n] = S

    if R != 0:
        for n in range(gate, duration):
            e[n] = e[gate - 1] - e[gate - 1] * (1 - np.exp(-5 * (n - gate + 1) / R))

    return e


def LPF(fs, fc, Q):
    fc /= fs
    fc = np.tan(np.pi * fc) / (2 * np.pi)
    a = np.zeros(3)
    b = np.zeros(3)
    a[0] = 1 + 2 * np.pi * fc / Q + 4 * np.pi * np.pi * fc * fc
    a[1] = (8 * np.pi * np.pi * fc * fc - 2) / a[0]
    a[2] = (1 - 2 * np.pi * fc / Q + 4 * np.pi * np.pi * fc * fc) / a[0]
    b[0] = 4 * np.pi * np.pi * fc * fc / a[0]
    b[1] = 8 * np.pi * np.pi * fc * fc / a[0]
    b[2] = 4 * np.pi * np.pi * fc * fc / a[0]
    a[0] = 1
    return a, b


def filter(a, b, x):
    length_of_x = len(x)
    y = np.zeros(length_of_x)
    for n in range(length_of_x):
        for m in range(0, 3):
            if n - m >= 0:
                y[n] += b[m] * x[n - m]

        for m in range(1, 3):
            if n - m >= 0:
                y[n] += -a[m] * y[n - m]

    return y


def flute(fs, note_number, velocity, gate):
    duration = gate + 1
    length_of_s = int(fs * duration)
    s = np.zeros(length_of_s)

    f0 = 440 * np.power(2, (note_number - 69) / 12)
    T = 1 / f0

    number_of_partial = 30
    a = np.array([[0.932, 0.042, 0.175, 0.014, 0.029, 0.008, 0.026, 0.015, 0.019, 0.010, 0.008, 0.004, 0.003, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.001, 0.000, 0.001,
                   0.000, 0.001],
                  [0.932, 0.091, 0.159, 0.021, 0.035, 0.015, 0.039, 0.016, 0.026, 0.010, 0.006, 0.004, 0.002, 0.002,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001,
                   0.000, 0.001],
                  [0.932, 0.150, 0.108, 0.024, 0.040, 0.026, 0.039, 0.014, 0.018, 0.009, 0.002, 0.004, 0.002, 0.003,
                   0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.165, 0.086, 0.027, 0.050, 0.033, 0.026, 0.010, 0.007, 0.007, 0.002, 0.003, 0.001, 0.002,
                   0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.215, 0.095, 0.032, 0.049, 0.047, 0.015, 0.011, 0.006, 0.006, 0.002, 0.002, 0.002, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.448, 0.116, 0.070, 0.079, 0.058, 0.010, 0.009, 0.004, 0.005, 0.002, 0.002, 0.002, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.685, 0.149, 0.130, 0.119, 0.047, 0.012, 0.006, 0.005, 0.005, 0.003, 0.002, 0.002, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
                   0.001, 0.001],
                  [0.932, 0.594, 0.226, 0.147, 0.118, 0.046, 0.017, 0.007, 0.009, 0.004, 0.002, 0.002, 0.002, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.001, 0.001,
                   0.001, 0.001],
                  [0.932, 0.532, 0.267, 0.116, 0.113, 0.057, 0.020, 0.007, 0.008, 0.003, 0.002, 0.002, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001],
                  [0.932, 0.583, 0.190, 0.075, 0.074, 0.036, 0.013, 0.005, 0.004, 0.003, 0.002, 0.002, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001],
                  [0.932, 0.407, 0.128, 0.052, 0.025, 0.010, 0.005, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.213, 0.118, 0.039, 0.015, 0.006, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.156, 0.105, 0.042, 0.014, 0.004, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.128, 0.110, 0.063, 0.014, 0.004, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.092, 0.120, 0.051, 0.012, 0.004, 0.002, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.063, 0.107, 0.024, 0.007, 0.002, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.057, 0.093, 0.017, 0.004, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.068, 0.077, 0.013, 0.004, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.105, 0.051, 0.007, 0.004, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.161, 0.053, 0.005, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.176, 0.065, 0.003, 0.003, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.001, 0.001,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.139, 0.049, 0.003, 0.003, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.087, 0.038, 0.002, 0.002, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.089, 0.052, 0.006, 0.004, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.194, 0.089, 0.017, 0.009, 0.003, 0.003, 0.002, 0.002, 0.001, 0.002, 0.001, 0.001, 0.001,
                   0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.248, 0.103, 0.022, 0.011, 0.004, 0.004, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001,
                   0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.148, 0.067, 0.013, 0.006, 0.003, 0.003, 0.001, 0.001, 0.002, 0.001, 0.001, 0.001, 0.000,
                   0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.070, 0.036, 0.006, 0.004, 0.002, 0.001, 0.001, 0.002, 0.002, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.082, 0.030, 0.006, 0.006, 0.003, 0.001, 0.001, 0.005, 0.002, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.077, 0.034, 0.007, 0.005, 0.002, 0.001, 0.002, 0.005, 0.001, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.041, 0.035, 0.006, 0.005, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.020, 0.024, 0.003, 0.003, 0.002, 0.002, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.019, 0.024, 0.005, 0.003, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.019, 0.028, 0.008, 0.003, 0.002, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.023, 0.023, 0.006, 0.003, 0.009, 0.003, 0.002, 0.002, 0.002, 0.003, 0.001, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.038, 0.029, 0.006, 0.005, 0.021, 0.005, 0.004, 0.004, 0.004, 0.006, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.005, 0.006, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.004, 0.002, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000],
                  [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.002, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                   0.000, 0.000]])

    VCO_A = np.repeat(0, number_of_partial)
    VCO_D = np.repeat(0, number_of_partial)
    VCO_S = np.repeat(1, number_of_partial)
    VCO_R = np.repeat(0, number_of_partial)
    VCO_gate = np.repeat(duration, number_of_partial)
    VCO_duration = np.repeat(duration, number_of_partial)
    VCO_offset = np.arange(1, number_of_partial + 1) * f0
    VCO_depth = np.repeat(0, number_of_partial)

    p1 = 0
    p2 = -0.1
    p3 = 8000 / 12
    p4 = 0.2
    VCA_deplay = np.zeros(number_of_partial)
    for i in range(number_of_partial):
        VCA_deplay[i] = 1 / (1 + np.exp(-(VCO_offset[i] - p1) / p3)) * p4 + p2

    for i in range(number_of_partial):
        VCA_deplay[i] = VCA_deplay[i] - VCA_deplay[0]

    VCA_deplay[0] = 0

    p1 = 0
    p2 = 0.1
    p3 = 8000 / 12
    p4 = 0.2
    VCA_A = np.zeros(number_of_partial)
    for i in range(number_of_partial):
        VCA_A[i] = (1 - 1 / (1 + np.exp(-(VCO_offset[i] - p1) / p3))) * p4 + p2

    VCA_S = np.repeat(1, number_of_partial)

    p1 = 0
    p2 = 0.2
    p3 = 8000 / 12
    p4 = 0.4
    VCA_R = np.zeros(number_of_partial)
    for i in range(number_of_partial):
        VCA_R[i] = (1 - 1 / (1 + np.exp(-(VCO_offset[i] - p1) / p3))) * p4 + p2

    VCA_gate = np.repeat(gate, number_of_partial)
    VCA_duration = np.repeat(duration, number_of_partial)
    VCA_offset = np.repeat(0, number_of_partial)
    VCA_depth = a[note_number - 59, :]

    np.random.seed(0)

    for i in range(number_of_partial):
        vco = ADSR(fs, VCO_A[i], VCO_D[i], VCO_S[i], VCO_R[i], VCO_gate[i], VCO_duration[i])
        for n in range(length_of_s):
            vco[n] = VCO_offset[i] + vco[n] * VCO_depth[i]

        w = np.zeros(length_of_s)
        for n in range(length_of_s):
            w[n] = np.random.rand() * 2 - 1  # -3 ~ 1

        # 白色雑音をLPFで投下させることにより、揺らぎをつける
        fc = 40
        Q = 1 / np.sqrt(2)
        a, b = LPF(fs, fc, Q)
        jitter = filter(a, b, w)
        jitter /= np.max(np.abs(jitter))

        p1 = 108
        p2 = 1
        p3 = 150 / 12
        p4 = 20
        jitter_depth = 1 / (1 + np.exp(-(note_number - p1) / p3) * p4) + p2

        for n in range(length_of_s):
            vco[n] += jitter[n] * jitter_depth

        if np.max(vco) < 20000:
            p = np.zeros(length_of_s)
            x = 0
            for n in range(length_of_s):
                p[n] = np.sin(2 * np.pi * x)
                delta = vco[n] / fs
                x += delta
                if x >= 1:
                    x -= 1

            vca = cosine_envelope(fs, VCA_deplay[i], VCA_A[i], VCA_S[i], VCA_R[i], VCA_gate[i], VCA_duration[i])

            for n in range(length_of_s):
                vca[n] = VCA_offset[i] + vca[n] * VCA_depth[i]

            w = np.zeros(length_of_s)
            for n in range(length_of_s):
                w[n] = np.random.rand() * 2 - 1

            fc = 40
            Q = 1 / np.sqrt(2)
            a, b = LPF(fs, fc, Q)
            shimmer = filter(a, b, w)
            shimmer /= np.max(np.abs(shimmer))

            p1 = 1
            p2 = -0.3
            p3 = 10 / 12
            p4 = 0.8
            shimmer_depth = 1 / (1 + np.exp(-(VCO_offset[i] / f0 - p1) / p3)) * p4 + p2

            for n in range(length_of_s):
                vca[n] *= 1 + shimmer[n] * shimmer_depth
                if vca[n] < 0:
                    vca[n] = 0

            for n in range(length_of_s):
                s[n] += p[n] * vca[n]

    s *= velocity / 127 / np.max(np.abs(s))
    return s


fs = 44100
note_number = 60
velocity = 100
gate = 1

s = flute(fs, note_number, velocity, gate)
length_of_s = len(s)

length_of_s_master = int(length_of_s + fs * 3)
s_master = np.zeros(length_of_s_master)

offset = int(fs * 1)
for n in range(length_of_s):
    s_master[offset + n] += s[n]

sf.write(f"flute{str(note_number)}.wav", s_master, fs)
